'use strict';

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  throw err;
});

// Ensure environment variables are read.
require('../config/env');

const fs = require('fs');
const chalk = require('react-dev-utils/chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('react-dev-utils/clearConsole');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const { choosePort, createCompiler, prepareUrls } = require('react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('react-dev-utils/openBrowser');
const semver = require('semver');
const paths = require('../config/paths');
const react = require(require.resolve('react', { paths: [paths.appPath] }));
const { checkBrowsers } = require('react-dev-utils/browsersHelper');

const createDevServerConfig = require('../config/webpackDevServer.config');
const getClientEnvironment = require('../config/env');

const env = getClientEnvironment(paths.publicUrlOrPath.slice(0, -1));
const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
  process.exit(1);
}

const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000; // server port
const HOST = '0.0.0.0';

async function start() {
  // We require that you explicitly set browsers and do not fall back to browserslist defaults.
  await checkBrowsers(paths.appPath, isInteractive);
  const port = await choosePort(HOST, DEFAULT_PORT);
  if (port == null) {
    return;
  }
  const config = require('../webpack.dev'); // webpack config
  const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
  const appName = require(paths.appPackageJson).name;

  const useTypeScript = fs.existsSync(paths.appTsConfig);
  const urls = prepareUrls(protocol, HOST, port, paths.publicUrlOrPath.slice(0, -1));
  // Create a webpack compiler that is configured with custom messages.
  const compiler = createCompiler({
    appName,
    config,
    urls,
    useYarn,
    useTypeScript,
    webpack,
  });
  const serverConfig = {
    ...createDevServerConfig(),
    host: HOST,
    port,
  };
  // Serve webpack assets generated by the compiler over a web server.
  const devServer = new WebpackDevServer(serverConfig, compiler);

  ['SIGINT', 'SIGTERM'].forEach(function (sig) {
    process.on(sig, function () {
      devServer.close();
      process.exit();
    });
  });
  process.stdin.on('end', function () {
    devServer.close();
    process.exit();
  });

  if (isInteractive) {
    clearConsole();
  }
  await devServer.start();
  if (env.raw.FAST_REFRESH && semver.lt(react.version, '16.10.0')) {
    console.log(chalk.yellow(`Fast Refresh requires React 16.10 or higher. You are using React ${react.version}.`));
  }
  openBrowser(urls.localUrlForBrowser);
}

async function main() {
  try {
    await start();
  } catch (err) {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  }
}

main();
